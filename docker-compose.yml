version: '3.3'
services:
  user-auth-db:
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_DATABASE: users
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
      MYSQL_ROOT_HOST: '%'
    ports:
      - 3307:3306
    volumes:
      - db-data:/var/lib/mysql
      - ./user_auth_ms/init.sql:/data/application/init.sql
    networks:
      - tradewave-network

  user-auth-app:
    container_name: user-auth-app
    build: 
      context: ./user_auth_ms
      dockerfile: Dockerfile
    ports:
      - 4000:4000
    volumes:
      - .:/app
    depends_on:
      - user-auth-db
    links:
      - user-auth-db
    networks:
      - tradewave-network
      
  mongo-db:
    image: mongo:latest
    container_name: mongo-db
    ports:
      - 27017:27017
    volumes:
      - "mongodata:/data/db"
    networks:
      - tradewave-network

  transactions-app:
    container_name: transactions-app
    build:
      context: ./transaction_ms
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    depends_on:
      - mongo-db
    networks:
      - tradewave-network

  prediction-app:
    container_name: prediction_app
    build:
      context: ./prediction_ms
      dockerfile: Dockerfile
    ports:
      - 7651:7651
    depends_on:
      - mongo-db
    networks:
      - tradewave-network
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py crontab add &&
             python stock_prediction_RPA/on_boot.py &
             python manage.py runserver 0.0.0.0:7651"


  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq-containter
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - tradewave-network

  graphql:
    container_name: graphql
    restart: always
    build:
      context: ./tradewave_ag
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    networks:
      - tradewave-network
    
  tradewave-ldap:
    image: osixia/openldap:1.1.8
    container_name: tradewave_ldap
    environment:
      COMPOSE_HTTP_TIMEOUT: 200
      LDAP_LOG_LEVEL: "256"
      LDAP_ORGANISATION: "Tradewave"
      LDAP_DOMAIN: "tradewave.app.co"
      LDAP_BASE_DN: ""
      LDAP_ADMIN_PASSWORD: "admin"
      LDAP_CONFIG_PASSWORD: "config"
      LDAP_READONLY_USER: "false"
      LDAP_READONLY_USER_USERNAME: "readonly"
      LDAP_READONLY_USER_PASSWORD: "readonly"
      LDAP_BACKEND: "hdb"
      LDAP_TLS: "true"
      LDAP_TLS_CRT_FILENAME: "ldap.crt"
      LDAP_TLS_KEY_FILENAME: "ldap.key"
      LDAP_TLS_CA_CRT_FILENAME: "ca.crt"
      LDAP_TLS_ENFORCE: "false"
      LDAP_TLS_CIPHER_SUITE: "SECURE256:-VERS-SSL3.0"
      LDAP_TLS_PROTOCOL_MIN: "3.1"
      LDAP_TLS_VERIFY_CLIENT: "demand"
      LDAP_REPLICATION: "false"
      #LDAP_REPLICATION_CONFIG_SYNCPROV: "binddn="cn=admin,cn=config"      bindmethod=simple credentials=$LDAP_CONFIG_PASSWORD searchbase="cn=config"      type=refreshAndPersist retry="60 +" timeout=1 starttls=critical"
      #LDAP_REPLICATION_DB_SYNCPROV: "binddn="cn=admin,$LDAP_BASE_DN"      bindmethod=simple credentials=$LDAP_ADMIN_PASSWORD searchbase="$LDAP_BASE_DN"      type=refreshAndPersist interval=00:00:00:10 retry="60 +" timeout=1      starttls=critical"
      #LDAP_REPLICATION_HOSTS:      "#PYTHON2BASH:['ldap://ldap.example.org','ldap://ldap2.example.org']"
      LDAP_REMOVE_CONFIG_AFTER_SETUP: "true"
      LDAP_SSL_HELPER_PREFIX: "ldap"
    tty: true
    stdin_open: true
    volumes:
      - /var/lib/ldap
      - /etc/ldap/slapd.d
      - /container/service/slapd/assets/certs/
    ports:
      - "389:389"
      - "636:636"
    hostname: "tradewave.app.co"

  phpldapadmin:
    image: osixia/phpldapadmin:latest
    container_name: ldap_client
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: "tradewave-ldap"
      PHPLDAPADMIN_HTTPS: "false"
    ports:
      - "8085:80"
    links:
      - tradewave-ldap

  tradewave_ag_proxy:
    container_name: tradewave_ag_proxy
    build:
      context: ./tradewave_ag_rp
      dockerfile: Dockerfile
    ports:
      - 80:80
    depends_on:
      - graphql
    networks:
      - tradewave-network

volumes:
  db-data:
  mongodata:
networks:
  tradewave-network: